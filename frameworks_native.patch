From e3d07a4123f905559b35d0e606d2d6b47d20acc1 Mon Sep 17 00:00:00 2001
From: Kyle Repinski <repinski23@gmail.com>
Date: Wed, 10 Jun 2015 18:49:57 -0500
Subject: [PATCH 1/3] egl: Add back b/10194508 workaround.

This was removed because it did not pass CTS and was applied across the board
for all OMAP4 devices, but some still-shipping OMAP4 devices don't need it
due to using DDK 1.12 drivers. Those drivers are only for OMAP4470 though,
and other devices besides OMAPs depend on this workaround too, and we don't
care about CTS for them anyway.

This patch adds this previously-long-standing behavior (EGL_NATIVE_VISUAL_ID)
back under the opt-in BOARD_EGL_WORKAROUND_BUG_10194508 flag.

Omni 6.0:
opengl/libs/Android.mk parts haven't been removed on 6.0 merge, only
opengl/libs/EGL/eglApi.cpp parts

Change-Id: Ie611634952a35dc756f1de806c850235caf73544

Conflicts:
	opengl/libs/Android.mk
---
 opengl/libs/Android.mk     | 5 +++++
 opengl/libs/EGL/eglApi.cpp | 9 +++++++++
 2 files changed, 14 insertions(+)

diff --git a/opengl/libs/Android.mk b/opengl/libs/Android.mk
index 24e4c19a5..671cb6a6c 100644
--- a/opengl/libs/Android.mk
+++ b/opengl/libs/Android.mk
@@ -45,6 +45,11 @@ LOCAL_CFLAGS += -fvisibility=hidden
 ifeq ($(BOARD_ALLOW_EGL_HIBERNATION),true)
   LOCAL_CFLAGS += -DBOARD_ALLOW_EGL_HIBERNATION
 endif
+
+ifeq ($(BOARD_EGL_WORKAROUND_BUG_10194508),true)
+  LOCAL_CFLAGS += -DWORKAROUND_BUG_10194508
+endif
+
 ifneq ($(MAX_EGL_CACHE_ENTRY_SIZE),)
   LOCAL_CFLAGS += -DMAX_EGL_CACHE_ENTRY_SIZE=$(MAX_EGL_CACHE_ENTRY_SIZE)
 endif
diff --git a/opengl/libs/EGL/eglApi.cpp b/opengl/libs/EGL/eglApi.cpp
index 436ea3080..68ccc0e71 100644
--- a/opengl/libs/EGL/eglApi.cpp
+++ b/opengl/libs/EGL/eglApi.cpp
@@ -492,6 +492,14 @@ EGLSurface eglCreateWindowSurface(  EGLDisplay dpy, EGLConfig config,
         EGLint format = HAL_PIXEL_FORMAT_RGBA_8888;
         android_dataspace dataSpace = HAL_DATASPACE_UNKNOWN;
 
+#ifdef WORKAROUND_BUG_10194508
+        if (!cnx->egl.eglGetConfigAttrib(iDpy, config, EGL_NATIVE_VISUAL_ID,
+                &format)) {
+            ALOGE("eglGetConfigAttrib(EGL_NATIVE_VISUAL_ID) failed: %#x",
+                    eglGetError());
+            format = 0;
+        }
+#else
         EGLint a = 0;
         cnx->egl.eglGetConfigAttrib(iDpy, config, EGL_ALPHA_SIZE, &a);
         if (a > 0) {
@@ -510,6 +518,7 @@ EGLSurface eglCreateWindowSurface(  EGLDisplay dpy, EGLConfig config,
                 format = HAL_PIXEL_FORMAT_RGBX_8888;
             }
         }
+#endif
 
         // now select a corresponding sRGB format if needed
         if (attrib_list && dp->haveExtension("EGL_KHR_gl_colorspace")) {
-- 
2.11.0


From feb4d53280ef31ae8fa3e5c69a0b945bc0fd697a Mon Sep 17 00:00:00 2001
From: xc-racer99 <xc-racer2@live.ca>
Date: Tue, 12 Apr 2016 20:11:51 -0700
Subject: [PATCH 2/3] surfaceflinger: Comment out context priority warning

Since we're compiling with -Wall, we can't have the warning
---
 services/surfaceflinger/RenderEngine/RenderEngine.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/services/surfaceflinger/RenderEngine/RenderEngine.cpp b/services/surfaceflinger/RenderEngine/RenderEngine.cpp
index d6a032fb3..c812a2a4f 100644
--- a/services/surfaceflinger/RenderEngine/RenderEngine.cpp
+++ b/services/surfaceflinger/RenderEngine/RenderEngine.cpp
@@ -83,7 +83,7 @@ RenderEngine* RenderEngine::create(EGLDisplay display, int hwcFormat) {
             EGL_CONTEXT_CLIENT_VERSION, contextClientVersion,      // MUST be first
 #ifdef EGL_IMG_context_priority
 #ifdef HAS_CONTEXT_PRIORITY
-#warning "using EGL_IMG_context_priority"
+//#warning "using EGL_IMG_context_priority"
             EGL_CONTEXT_PRIORITY_LEVEL_IMG, EGL_CONTEXT_PRIORITY_HIGH_IMG,
 #endif
 #endif
-- 
2.11.0


From 7930c56767ab982f102d021ce6747b7cf4f24c11 Mon Sep 17 00:00:00 2001
From: Sam Mortimer <sam@mortimer.me.uk>
Date: Sat, 28 Jan 2017 13:58:14 -0800
Subject: [PATCH 3/3] Preserve app data if neither ce nor de have xattr
 user.default

For a given app, if xattr user.default is missing from both ce and de data
dirs, installd currently defaults to using ce.  However, if a system
app sets defaultToDeviceProtectedStorage="true" in it's manifest,
data is actually stored in de and so the effect is wipe for such
apps in the case where xattr user.default attributes are missing
(such as a tar backup/restore).

In the case where user.default is missing, if the app wants de
and the de dir exists then use it, otherwise, default to ce
as before.

Change-Id: I8d5583b7d156809b2aecc676db35e6bf7cad3e0c
---
 cmds/installd/commands.cpp | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/cmds/installd/commands.cpp b/cmds/installd/commands.cpp
index 271c75ba4..cadcd1ef1 100644
--- a/cmds/installd/commands.cpp
+++ b/cmds/installd/commands.cpp
@@ -238,11 +238,15 @@ int migrate_app_data(const char *uuid, const char *pkgname, userid_t userid, int
     auto ce_path = create_data_user_ce_package_path(uuid, userid, pkgname);
     auto de_path = create_data_user_de_package_path(uuid, userid, pkgname);
 
-    // If neither directory is marked as default, assume CE is default
+    // If neither directory is marked as default, use DE if requested by
+    // the app (and it exists), otherwise assume CE.
     if (getxattr(ce_path.c_str(), kXattrDefault, nullptr, 0) == -1
             && getxattr(de_path.c_str(), kXattrDefault, nullptr, 0) == -1) {
-        if (setxattr(ce_path.c_str(), kXattrDefault, nullptr, 0, 0) != 0) {
-            PLOG(ERROR) << "Failed to mark default storage " << ce_path;
+        struct stat s;
+        const char *data_path = (flags & FLAG_STORAGE_DE) && !stat(de_path.c_str(), &s)
+                ? de_path.c_str() : ce_path.c_str();
+        if (setxattr(data_path, kXattrDefault, nullptr, 0, 0) != 0) {
+            PLOG(ERROR) << "Failed to mark default storage " << data_path;
             return -1;
         }
     }
-- 
2.11.0

