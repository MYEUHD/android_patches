From 7263ad2c3fdab2c2b53635e471c2431120ef6989 Mon Sep 17 00:00:00 2001
From: Tom Marshall <tdm@cyngn.com>
Date: Wed, 4 Nov 2015 15:44:44 -0800
Subject: [PATCH] vold: Support internal storage partitions

 * Support nonremovable disks and expose a nonremovable flag in the
   DiskCreated message.
 * New DiskPartition class to hold single partitions.  DiskPartition is
   used when the fs_mgr entry has a partnum (eg. when fs_mgr_flags
   contains voldmanaged=label:#).  Override disk partitioning methods
   to prevent destroying the emmc.

@xc-racer99: Fix build for AOSP by switiching #include <base/*> to #include <android-base/*>
Change-Id: Id7ec3ea409b5c96e691730604e4b1e9cc3aa9d33
---
 Android.mk        |  1 +
 Disk.h            | 18 +++++++-----
 DiskPartition.cpp | 87 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 DiskPartition.h   | 52 +++++++++++++++++++++++++++++++++
 VolumeManager.cpp |  8 +++--
 VolumeManager.h   |  7 +++--
 main.cpp          | 11 ++++---
 7 files changed, 166 insertions(+), 18 deletions(-)
 create mode 100644 DiskPartition.cpp
 create mode 100644 DiskPartition.h

diff --git a/Android.mk b/Android.mk
index cabf9b3..055e71e 100644
--- a/Android.mk
+++ b/Android.mk
@@ -19,6 +19,7 @@ common_src_files := \
 	VoldUtil.c \
 	cryptfs.c \
 	Disk.cpp \
+	DiskPartition.cpp \
 	VolumeBase.cpp \
 	PublicVolume.cpp \
 	PrivateVolume.cpp \
diff --git a/Disk.h b/Disk.h
index 77ec7df..c94e829 100644
--- a/Disk.h
+++ b/Disk.h
@@ -52,6 +52,8 @@ public:
         kUsb = 1 << 3,
         /* Flag that disk is EMMC internal */
         kEmmc = 1 << 4,
+        /* Flag that disk is non-removable */
+        kNonRemovable = 1 << 5,
     };
 
     const std::string& getId() { return mId; }
@@ -67,22 +69,22 @@ public:
 
     void listVolumes(VolumeBase::Type type, std::list<std::string>& list);
 
-    status_t create();
-    status_t destroy();
+    virtual status_t create();
+    virtual status_t destroy();
 
-    status_t readMetadata();
-    status_t readPartitions();
+    virtual status_t readMetadata();
+    virtual status_t readPartitions();
 
     status_t unmountAll();
 
-    status_t partitionPublic();
-    status_t partitionPrivate();
-    status_t partitionMixed(int8_t ratio);
+    virtual status_t partitionPublic();
+    virtual status_t partitionPrivate();
+    virtual status_t partitionMixed(int8_t ratio);
 
     void notifyEvent(int msg);
     void notifyEvent(int msg, const std::string& value);
 
-private:
+protected:
     /* ID that uniquely references this disk */
     std::string mId;
     /* Original event path */
diff --git a/DiskPartition.cpp b/DiskPartition.cpp
new file mode 100644
index 0000000..ddfdc15
--- /dev/null
+++ b/DiskPartition.cpp
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2015 Cyanogen, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "DiskPartition.h"
+#include "PublicVolume.h"
+#include "PrivateVolume.h"
+#include "Utils.h"
+#include "VolumeBase.h"
+#include "VolumeManager.h"
+#include "ResponseCode.h"
+
+#include <android-base/file.h>
+#include <android-base/stringprintf.h>
+#include <android-base/logging.h>
+#include <diskconfig/diskconfig.h>
+
+#include <vector>
+#include <fcntl.h>
+#include <inttypes.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/mount.h>
+
+using android::base::ReadFileToString;
+using android::base::WriteStringToFile;
+using android::base::StringPrintf;
+
+namespace android {
+namespace vold {
+
+DiskPartition::DiskPartition(const std::string& eventPath, dev_t device,
+            const std::string& nickname, int flags, int partnum) :
+        Disk(eventPath, device, nickname, flags),
+        mPartNum(partnum) {
+    // Empty
+}
+
+DiskPartition::~DiskPartition() {
+    // Empty
+}
+
+status_t DiskPartition::create() {
+    CHECK(!mCreated);
+    mCreated = true;
+    notifyEvent(ResponseCode::DiskCreated, StringPrintf("%d", mFlags));
+    dev_t partDevice = makedev(major(mDevice), minor(mDevice) + mPartNum);
+    createPublicVolume(partDevice);
+    return OK;
+}
+
+status_t DiskPartition::destroy() {
+    CHECK(mCreated);
+    destroyAllVolumes();
+    mCreated = false;
+    notifyEvent(ResponseCode::DiskDestroyed);
+    return OK;
+}
+
+status_t DiskPartition::partitionPublic() {
+    return -1;
+}
+
+status_t DiskPartition::partitionPrivate() {
+    return -1;
+}
+
+status_t DiskPartition::partitionMixed(int8_t ratio) {
+    return -1;
+}
+
+}  // namespace vold
+}  // namespace android
diff --git a/DiskPartition.h b/DiskPartition.h
new file mode 100644
index 0000000..cf440a6
--- /dev/null
+++ b/DiskPartition.h
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2015 Cyanogen, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_VOLD_DISKPARTITION_H
+#define ANDROID_VOLD_DISKPARTITION_H
+
+#include "Disk.h"
+
+namespace android {
+namespace vold {
+
+/*
+ * Representation of a single partition on physical media.  Useful for
+ * single media partitions such as "internal" sdcard partitions.
+ */
+
+class DiskPartition : public Disk {
+public:
+    DiskPartition(const std::string& eventPath, dev_t device,
+            const std::string& nickname,
+            int flags, int partnum);
+    virtual ~DiskPartition();
+
+    virtual status_t create();
+    virtual status_t destroy();
+
+    virtual status_t partitionPublic();
+    virtual status_t partitionPrivate();
+    virtual status_t partitionMixed(int8_t ratio);
+
+private:
+    /* Partition number */
+    int mPartNum;
+};
+
+}  // namespace vold
+}  // namespace android
+
+#endif
diff --git a/VolumeManager.cpp b/VolumeManager.cpp
index 5cc60a1..d0f4605 100644
--- a/VolumeManager.cpp
+++ b/VolumeManager.cpp
@@ -311,8 +311,12 @@ void VolumeManager::handleBlockEvent(NetlinkEvent *evt) {
                     flags |= android::vold::Disk::Flags::kUsb;
                 }
 
-                auto disk = new android::vold::Disk(eventPath, device,
-                        source->getNickname(), flags);
+                android::vold::Disk* disk = (source->getPartNum() == -1) ?
+                        new android::vold::Disk(eventPath, device,
+                                source->getNickname(), flags) :
+                        new android::vold::DiskPartition(eventPath, device,
+                                source->getNickname(), flags,
+                                source->getPartNum());
                 disk->create();
                 mDisks.push_back(std::shared_ptr<android::vold::Disk>(disk));
                 break;
diff --git a/VolumeManager.h b/VolumeManager.h
index 39fc8f9..c43aae6 100644
--- a/VolumeManager.h
+++ b/VolumeManager.h
@@ -36,6 +36,7 @@
 #include <sysutils/NetlinkEvent.h>
 
 #include "Disk.h"
+#include "DiskPartition.h"
 #include "VolumeBase.h"
 
 /* The length of an MD5 hash when encoded into ASCII hex characters */
@@ -96,8 +97,8 @@ public:
 
     class DiskSource {
     public:
-        DiskSource(const std::string& sysPattern, const std::string& nickname, int flags) :
-                mSysPattern(sysPattern), mNickname(nickname), mFlags(flags) {
+        DiskSource(const std::string& sysPattern, const std::string& nickname, int partnum, int flags) :
+                mSysPattern(sysPattern), mNickname(nickname), mPartNum(partnum), mFlags(flags) {
         }
 
         bool matches(const std::string& sysPath) {
@@ -105,11 +106,13 @@ public:
         }
 
         const std::string& getNickname() { return mNickname; }
+        int getPartNum() { return mPartNum; }
         int getFlags() { return mFlags; }
 
     private:
         std::string mSysPattern;
         std::string mNickname;
+        int mPartNum;
         int mFlags;
     };
 
diff --git a/main.cpp b/main.cpp
index 9cbcf88..fc0b928 100644
--- a/main.cpp
+++ b/main.cpp
@@ -219,13 +219,9 @@ static int process_config(VolumeManager *vm) {
     bool has_adoptable = false;
     for (int i = 0; i < fstab->num_entries; i++) {
         if (fs_mgr_is_voldmanaged(&fstab->recs[i])) {
-            if (fs_mgr_is_nonremovable(&fstab->recs[i])) {
-                LOG(WARNING) << "nonremovable no longer supported; ignoring volume";
-                continue;
-            }
-
             std::string sysPattern(fstab->recs[i].blk_device);
             std::string nickname(fstab->recs[i].label);
+            int partnum = fstab->recs[i].partnum;
             int flags = 0;
 
             if (fs_mgr_is_encryptable(&fstab->recs[i])) {
@@ -236,9 +232,12 @@ static int process_config(VolumeManager *vm) {
                     || property_get_bool("vold.debug.default_primary", false)) {
                 flags |= android::vold::Disk::Flags::kDefaultPrimary;
             }
+            if (fs_mgr_is_nonremovable(&fstab->recs[i])) {
+                flags |= android::vold::Disk::Flags::kNonRemovable;
+            }
 
             vm->addDiskSource(std::shared_ptr<VolumeManager::DiskSource>(
-                    new VolumeManager::DiskSource(sysPattern, nickname, flags)));
+                    new VolumeManager::DiskSource(sysPattern, nickname, partnum, flags)));
         }
     }
     property_set("vold.has_adoptable", has_adoptable ? "1" : "0");
-- 
2.7.4

